name: CI/CD Pipeline

on:
  push:
    branches:
      - prod
      - dev
      - stage
  pull_request:
    branches:
      - prod
      - dev
      - stage

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - name: Install Dependencies
        run: |
          echo "Installing dependencies..."
          npm install
      - name: "Install Lambda Dependencies"
        run: |
          echo "Installing Lambda dependencies..."
          npm run install:lambdas
      - name: Run Tests
        run: |
          echo "Running tests..."
          npm run test

  build:
    name: Deployment
    environment:
      name: ${{ github.ref_name }}
      url: ${{ steps.output.outputs.url }}
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - name: Install Dependencies
        run: |
          echo "Installing dependencies..."
          npm install
      - name: "Install Lambda Dependencies"
        run: |
          echo "Installing Lambda dependencies..."
          npm run install:lambdas
      - name: Build
        run: |
          echo "Building..."
          npm run build:all
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set Terraform Workspace
        id: set-workspace
        run: |
          echo "Setting terraform workspace..."
          prod="${{ github.ref_name == 'prod' }}"
          dev="${{ github.ref_name == 'dev' }}"
          if [ "$prod" = true ]; then
            echo "TF_WORKSPACE=prod" >> $GITHUB_ENV
          elif [ "$dev" == true ]; then
            echo "TF_WORKSPACE=dev" >> $GITHUB_ENV
          else
            echo "TF_WORKSPACE=stage" >> $GITHUB_ENV
          fi
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.9
      - name: Terraform Format
        id: fmt
        run: |
          echo "Terraform format..."
          npm run terraform:main-infra:format
      - name: Terraform Init
        id: init
        run: |
          echo "Terraform init..."
          npm run terraform:main-infra:init
      - name: Terraform Validate
        id: validate
        run: |
          echo "Terraform validate..."
          npm run terraform:main-infra:validate
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          echo "Terraform plan..."
          npm run terraform:main-infra:plan
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push'
        run: |
          echo "Terraform apply..."
          npm run terraform:main-infra:apply
      - name: Terraform Output
        id: output
        if: github.event_name == 'push'
        run: |
          echo "Terraform output..."
          echo "::set-output name=url::$(npm run terraform:main-infra:output)"
