name: CI/CD Pipeline

on:
  push:
    branches:
      - prod
      - dev
      - stage
  pull_request:
    branches:
      - prod
      - dev
      - stage

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - name: Install Dependencies
        run: |
          echo "Installing dependencies..."
          npm install
      - name: "Install Lambda Dependencies"
        run: |
          echo "Installing Lambda dependencies..."
          npm run install:lambdas
      - name: Run Tests
        run: |
          echo "Running tests..."
          npm run test

  build:
    name: Deployment
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"
      - name: Install Dependencies
        run: |
          echo "Installing dependencies..."
          npm install
      - name: "Install Lambda Dependencies"
        run: |
          echo "Installing Lambda dependencies..."
          npm run install:lambdas
      - name: Build
        run: |
          echo "Building..."
          npm run build:all
      - name: Set Terraform Workspace
        id: set-workspace
        run: |
          echo "Setting terraform workspace..."
          prod="${{ github.event.pull_request.base.ref == 'prod' || github.ref == 'refs/head/prod' }}"
          dev="${{ github.event.pull_request.base.ref == 'dev' || github.ref == 'refs/head/dev' }}"
          echo "Setting terraform workspace..."
          if [ "$prod" = true ]; then
            echo "::set-output name=environment::prod"
          elif [ "$dev" == true ]; then
            echo "::set-output name=environment::dev"
          else
            echo "::set-output name=environment::stage"
          fi
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
      - name: Terraform Format
        id: format
        run: |
          echo "Terraform format..."
          npm run terraform:main-infra:format
      - name: Terraform Init
        id: init
        run: |
          echo "Terraform init..."
          npm run terraform:main-infra:init
        env:
          TF_WORKSPACE: ${{ steps.set-workspace.outputs.environment }}
      - name: Terraform Plan
        id: plan
        run: |
          echo "Terraform plan..."
          npm run terraform:main-infra:plan
        continue-on-error: true
        env:
          TF_WORKSPACE: ${{ steps.set-workspace.outputs.environment }}
